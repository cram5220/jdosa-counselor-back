buildscript {
    ext {
        springBootVersion = '2.6.4'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group 'com.nsearchlist'
version '1.0-SNAPSHOT'
sourceCompatibility = 17

repositories {
    mavenCentral()
    maven {
        url 'https://repo.clojars.org'
        name 'Clojars'
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')

    //lombok
    implementation('org.projectlombok:lombok')
    implementation('org.jetbrains:annotations:23.0.0')
    annotationProcessor('org.projectlombok:lombok')

    //jpa
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    //jdbc
    implementation('org.springframework.session:spring-session-jdbc')
    //db
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('com.microsoft.sqlserver:mssql-jdbc')

    //mustache
    implementation('org.springframework.boot:spring-boot-starter-mustache')

    //oauth
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')

    // encrypt, decrypt
    implementation('org.bouncycastle:bcprov-jdk15on:1.70')

    //aop
    implementation('org.springframework.boot:spring-boot-starter-aop')

    //jwt
    implementation('io.jsonwebtoken:jjwt:0.9.1')

    //http client
    implementation('org.apache.httpcomponents:httpclient:4.4.1')

    //test spring
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')

    //junit
    testImplementation(platform('org.junit:junit-bom:5.9.0')) //이거 버전빼고도 잘 작동하는지 확인

}



test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
jar {
    manifest {
        attributes 'Main-Class': 'dosa.counselor.Application'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
